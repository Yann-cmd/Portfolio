
/**
 * Sorting class
 *
 * @author IUT // Modified by James Robertson
 */
public class LibTri2 {
    
    
    
    
    /** affiche un TNP
     * @param pfTNP  IN la liste des éléments
     */
    public static void afficherTNP(TNP pfTNP)  {
        System.out.print("[") ;
        for (int i = 0; i < pfTNP.count ; i = i + 1){
            System.out.print(pfTNP.elements[i]) ;
            if (i < (pfTNP.count - 1)) { System.out.print(",") ; }
        }
        System.out.print("]") ;
    }
    
     /** tri dans l'ordre croissant
     * @param pfTNP  IN/OUT la liste des éléments
     * @param pfPrintSP  IN vrai la trace complète avec toutes les it du for j faux que le résumé de la  trace 
     * @return le message de trace 
     */
    public static void triSimple(TNP pfTNP)    {
        for (int i = 0; i < pfTNP.count -1 ; i = i + 1) {
            for (int j = i+1; j < pfTNP.count ; j = j + 1) {
                String group1 = String.valueOf(pfTNP.elements[i].group);
                String group2 = String.valueOf(pfTNP.elements[j].group);
                if(isBigger(pfTNP.elements[i], pfTNP.elements[j])) {
                     Etudiant echange = pfTNP.elements[i] ;
                     pfTNP.elements[i] = pfTNP.elements[j] ;
                     pfTNP.elements[j] = echange ;
                }
            }
        }
        
    
    }
        
     /** Compares two given students
     * @param student  IN: a student
     * @param compared  IN: a student to compare with
     * @return whether the first student is bigger than the other 
     */
    public static boolean isBigger(Etudiant student, Etudiant compared) {
        String studentGroup = String.valueOf(student.group);  // Fetch the student's group in the form of a String
        String comparedGroup = String.valueOf(compared.group); // Fetch the other students group 
        // if the compared student's group is lower, the student must be bigger
        if(comparedGroup.compareTo(studentGroup) < 0) {
            return true;
        }
        // if the compared student's group is higher, the student must be smaller  
        if(comparedGroup.compareTo(studentGroup) > 0) {
            return false;
        }
        // If the group is neither bigger or smaller then it must be equal
        // We can start comparing last names
        if(compared.lastName.compareTo(student.lastName) < 0) {
            return true;
        }
        if(compared.lastName.compareTo(student.lastName) > 0) {
            return false;
        }
        
        // If last name is neither bigger nor smaller than we compare first names
        if(compared.firstName.compareTo(student.firstName) < 0) {
            return true;
        }
        
        // If none of the attributes are bigger then it can't be bigger...
        return false;
        
    } // end of function

    
    
  
  
    
    
}

