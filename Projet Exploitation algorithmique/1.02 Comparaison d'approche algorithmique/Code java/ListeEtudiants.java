import java.io.*;
import java.util.Scanner;
/**
 * Student loader class 
 *
 * @author IUT // Modified by James Robertson
 */
public class ListeEtudiants {

    private static StudentManager studentManager;
    
    /** Donne le nombre d’étudiants de la liste pfListe
     *  @param   pfListe IN tableau contenant la liste d'étudiants nom, prenom
     *  @return le nombre d’étudiants de la liste
     **/
    public static int nbEtudiant(String pfListe[][]){
        return pfListe.length;
    } 
    
    /** Charge dans un tableau la liste des étudiants
     *  @param   pfFileName IN le nom du fichier à lire
     *  @param   pfDelimiter IN le délimiteur de champs dans le fichier csv
     *  @return le tableau
     **/
    public static String [][] getListe(String pfFileName, String pfDelimiter)
        throws FileNotFoundException{
        
        // Ouvre un fichier et compte le nombre  de lignes du fichier.
        //   Ce nombre de lignes correspond au nombre d'étudiants
        BufferedReader read = new BufferedReader(new FileReader(pfFileName));
        int nbElt = 0;

        // le try catch est la pour recuperer des erreurs eventuelles de lecture
        // dans le fichier. Si une erreur se produit, ce sont les instructions
        // du catch qui seront executees (sera vu en semaine 46).
        try {
            while (read.readLine() != null) {
                nbElt++;
            }
            read.close(); 
        } catch (IOException e) {
            e.printStackTrace();
        } 
       

        // création d'un tableau à deux entrees (une pour le nom, une pour le
        // prenom) pour le nbElt etudiants
        String res [][] = new String [nbElt][3];
        
        
        // lecture du fichier pour récupérer les noms et prénoms
        String line = "";
        
        try {
            BufferedReader reader = new BufferedReader(new FileReader(pfFileName));
            int cpt = 0; // numero de l'etudiant en lecture
    

            // loops through every line until null found
            while ((line = reader.readLine()) != null) {
                
                // separate every token by comma
                String[] token = line.split(pfDelimiter);    

                res [cpt][0] = token[0];
                res [cpt][1] = token[1]; 
                res [cpt][2] = token[3]; // We only need to load TP group 
                 
    
                cpt ++;
            }
            reader.close(); 
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        
        return res;
    }
    
    
    /**
     * Load a given array of students to Student Manager
     * @param etudiant IN: a student
     * @return the td group number
     * 
     */
    public static void loadStudents(String promo[][], StudentManager studentManager) {
        for (int i = 0 ; i < nbEtudiant(promo) ; i++){   
                studentManager.createStudent(promo[i][0], promo[i][1],promo[i][2]);
        }
    }
    
    
    /**
     * Get Student Manager
     * @returns the instance of student manager
     * 
     */
    // NOTE: This program is designed to have only one instance of student manager
    // However we use other instances in the Search class for testing purposes 
    public static StudentManager getStudentManager() {
        return studentManager;
    }
    
    
    public static void main(String[] args) {
        try {
            String promo[][] = getListe("listenomssansaccent.csv", ",");
            studentManager = new StudentManager(nbEtudiant(promo)); // create instance of StudentManager class 
            loadStudents(promo,studentManager);
            studentManager.sort();
        } catch (Exception e) {  
            System.out.println("Erreur : " + e.getMessage());
        } 
        Search.runTests();
    
        
    } 
    

      
}

