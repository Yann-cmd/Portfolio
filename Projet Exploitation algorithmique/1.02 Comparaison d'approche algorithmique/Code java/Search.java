import java.util.ArrayList;
/**
 * Search algorithm implementations and tests
 *
 * @author James Robertson // Yann Guillevic
 * @version 1.0
 */
public class Search
{
   

    
    
        /** Checks if student is in array 
         * @param tab IN: a type containing an array of students
         * @param student: IN a student to check 
         * @return a Result containing a boolean (if the student was found) and an integer (number of checks)
         */
        public static Result testSansRupture(TNP tab, Etudiant student) {
        boolean found = false;
        int compteur = 0;
        for(int i = 0; i < tab.count ; i++) {
            compteur++; // Increment once for the loop check
            compteur++; // Increment once for the if statement
            Etudiant indexStudent = tab.elements[i];
            boolean same = equals(indexStudent,student);
            if(equals(tab.elements[i],student)) {
                    found = true;
            }
        }
    
        return new Result(found,compteur);
    
    }
    
    
    
    /** Checks if student is in array 
         * @param tab IN: a type containing an array of students
         * @param student: IN a student to check 
         * @return a Result containing a boolean (if the student was found) and an integer (number of checks)
    */
    public static Result testAvecRupture(TNP tab, Etudiant student) {
        int compteur = 0;
        for(int i = 0; i < tab.count ; i++) {
            compteur++; // Increment once for the while loop check
            compteur++; // Increment once for the if statement
            if(equals(tab.elements[i],student)) {
                return new Result(true,compteur);
            }
        } 
        return new Result(false,compteur);
    }
    
    
    /** Checks if student is in array 
         * @param tab IN: a type containing an array of students
         * @param student: IN a student to check 
         * @return a Result containing a boolean (if the student was found) and an integer (number of checks)
    */
     public static Result testDichotomique(TNP tab, Etudiant student) {
         int start = 0;
         int end = tab.count - 1;
         int compteur = 0;
         // exit condition
         while(start <= end) {
            int center = (start + end) / 2;
            Etudiant centerStudent = tab.elements[center];
            compteur++; // count while comparison
            
            compteur++; // count if comparison
            
            // if the student is found return 
           if(equals(student,centerStudent)) {
    
               return new Result(true,compteur);
           }
           // if the student is bigger reduce list size by setting start to center
           else if(LibTri2.isBigger(student,centerStudent)) {
               compteur++; // If this runs, we count it
               start = center + 1;
           }
           
           else {
               compteur++; // If this runs, we count it
               end = center - 1;
           }
           
        
     
      }
      return new Result(false,compteur);
    } // end of function
    
    
     /** Checks for equality between two students
     * @return whether student1 and student2 are equal 
     */
     public static boolean equals(Etudiant student1, Etudiant student2) {
         // if the first names are different, they aren't equal
         if(!student1.firstName.equalsIgnoreCase(student2.firstName)) {
             return false;
         }
         
         // if the last names are different, they aren't equal
         if(!student1.lastName.equalsIgnoreCase(student2.lastName)) {
             return false;
         }
        
         // get all the groups
         String group1 = String.valueOf(student1.group);
         String group2 = String.valueOf(student2.group);
        
         // if the groups are different, they aren't equal 
         if(!group1.equalsIgnoreCase(group2)) {
             return false;
         }

      // if we reach this part, the first and last names as well as the group are all equal
      return true;
     
    } // end of function
    
    /** Run tests 
     * Executes different possible situations
     */
    public static void runTests() {
        // load list of 10 students
        StudentManager studentManager = null;
        try {
        String promo[][] = ListeEtudiants.getListe("jeudessai.csv", ",");
        
        studentManager = new StudentManager(ListeEtudiants.nbEtudiant(promo)); // create instance of StudentManager class ^^ 
        ListeEtudiants.loadStudents(promo,studentManager);
        System.out.println("On tri puis on affiche");
        studentManager.sort();
        studentManager.showStudents();
    
            
        } catch(Exception e) {
             e.printStackTrace();    
        }
        // Run tests
        System.out.println("---------------------------------------");
        System.out.println("Tests avec une liste de 10 étudiants");
        System.out.println("Cas où l'on cherche un étudiant qui n'existe pas");
        runTest(new Etudiant("Troisieme","Sortie","3B"),studentManager);
        System.out.println("Cas où l'on cherche un étudiant avec le mauvais groupe");
        runTest(new Etudiant("Tex","Agere","3B"),studentManager);
        System.out.println("Cas où l'on cherche un étudiant avec le mauvais nom de famille");
        runTest(new Etudiant("Tex","Verse","1B"),studentManager);
        System.out.println("Cas où l'on cherche un étudiant avec le mauvais prénom");
        runTest(new Etudiant("Phil","Agere","1B"),studentManager);
       
        System.out.println("Quelques cas où l'étudiant existe :");
        runTest(new Etudiant("Samira","Bien","2A"),studentManager);
        runTest(new Etudiant("Andre","Naline","1A"),studentManager);
        System.out.println("Cas où où l'étudiant est au centre de la liste: (meilleur cas pour dicho)");
        runTest(new Etudiant("Jeremy","Ade","1B"),studentManager); 
        System.out.println("Cas où l'étudiant est premier de la liste: (meilleur cas pour recherche avec rupture)");
        runTest(new Etudiant ("Barack", "Afritt","1A"), studentManager); 
        System.out.println("Cas où l'étudiant est dernier de la liste: (pire cas pour recherche avec rupture)");
        runTest(new Etudiant ("Pit", "Za","5B"),studentManager);
        System.out.println("---------------------------------------");
        
         // load list of 199 students
        StudentManager studentManager2 = null;
        try {
        String promo2[][] = ListeEtudiants.getListe("listenomssansaccent.csv", ",");
        
        studentManager2 = new StudentManager(ListeEtudiants.nbEtudiant(promo2)); // create instance of StudentManager class ^^ 
        ListeEtudiants.loadStudents(promo2,studentManager2);
        System.out.println("On tri puis on affiche");
        studentManager2.sort();
        studentManager2.showStudents();
    
            
        } catch(Exception e) {
             e.printStackTrace();  
        }
        
        // Run tests
        System.out.println("---------------------------------------");
        System.out.println("Tests avec une liste de 199 étudiants");
        System.out.println("Cas où l'on cherche un étudiant qui n'existe pas");
        runTest(new Etudiant("Troisieme","Sortie","3B"),studentManager2);
        System.out.println("Cas où l'on cherche un étudiant avec le mauvais groupe");
        runTest(new Etudiant("Garcin","Lazare","3B"),studentManager2);
        System.out.println("Cas où l'on cherche un étudiant avec le mauvais nom de famille");
        runTest(new Etudiant("Garcin","Hannibal","1A"),studentManager2);
        System.out.println("Cas où l'on cherche un étudiant avec le mauvais prénom");
        runTest(new Etudiant("Farid","Lazare","1A"),studentManager2);
       
        System.out.println("Quelques cas où l'étudiant existe :");
        runTest(new Etudiant("Nordine","Ateur","1B"),studentManager2);
        runTest(new Etudiant("Paul","Chtron","2A"),studentManager2);
        System.out.println("Cas où où l'étudiant est au centre de la liste: (meilleur cas pour dicho)");
        runTest(new Etudiant("Sam","Gratte","3B"),studentManager2); 
        System.out.println("Cas où l'étudiant est premier de la liste: (meilleur cas pour recherche avec rupture)");
        runTest(new Etudiant ("Barack", "Afritt","1A"), studentManager2); 
        System.out.println("Cas où l'étudiant est dernier de la liste: (pire cas pour recherche avec rupture)");
        runTest(new Etudiant ("Pit", "Za","5B"),studentManager2);
        System.out.println("---------------------------------------");
    
        // General stats for 10 students
        System.out.println("10 étudiants");
        runAllPossibleTests(studentManager);
        // General stats for 199 students
        runAllPossibleTests(studentManager2);
    } // end of function
    
    
    
    
     /** Runs a test on a given target with a given manager
     * @param target IN: a target to search for
     * @param studentManager IN: a studentManager to search in 
     */
    public static void runTest(Etudiant target, StudentManager studentManager) {
        // get Tab of students
        TNP tab = studentManager.getStudents();
        
        // Run tests
        Result sansRupture1 = testSansRupture(tab,target);
        Result avecRupture1 = testAvecRupture(tab,target);
        Result dicho1 = testDichotomique(tab,target);
        // Print results
        System.out.println("Test sans rupture -> Trouvé: " + sansRupture1.found + " - Comparaisons: " + sansRupture1.steps);
        System.out.println("Test avec rupture -> Trouvé: "+ avecRupture1.found + " - Comparaisons: " + avecRupture1.steps);
        System.out.println("Test dicho  -> Trouvé: " + dicho1.found + " - Comparaisons: " + dicho1.steps);
        
    
    } // end of function
    
    
    
     /** Runs all possible tests on an array of students
     * @param studentManager IN: a studentManager to search in 
     */
    public static void runAllPossibleTests(StudentManager studentManager) {
        studentManager.sort();
        ArrayList<Result> sansRupture = new ArrayList<>();
        ArrayList<Result> avecRupture = new ArrayList<>();
        ArrayList<Result> dicho = new ArrayList<>();
        
        
        for(int i = 0 ; i < studentManager.count() ; i++) {
            Etudiant etudiant = studentManager.getStudents().elements[i];
            sansRupture.add(testSansRupture(studentManager.getStudents(),etudiant));
            avecRupture.add(testAvecRupture(studentManager.getStudents(),etudiant));
            dicho.add(testDichotomique(studentManager.getStudents(),etudiant));
        }
        
        
        System.out.println("Total essais sansRupture : " + sum(sansRupture));
        System.out.println("Moyenne des essais sansRupture : " + (sum(sansRupture)/sansRupture.size()));
        System.out.println("Total des essais avecRupture : " + (sum(avecRupture)));
        System.out.println("Moyenne des essais avecRupture : " + (sum(avecRupture)/avecRupture.size()));
        System.out.println("Total des essais dicho : " + (sum(dicho)));
        System.out.println("Moyenne des essais dicho : " + (sum(dicho)/dicho.size()));
        
        
    }


    /** Return the amount of steps in a list
     * @param results IN: a list of results
     * @returns the amount of steps
     */
    public static int sum(ArrayList<Result> results) {
        int sum = 0;
    
    
        for(Result result : results) {
            sum+= result.steps;
        }   
    
    
    
        return sum;
}


}// end of class